}
if(length(state.ini.fixed) > 0) {
names(state.ini.fixed) <- paste('M0',names(state.ini.fixed), sep="_")
}
# -----------------------------------------------------------------------
if (length(mkinmodini$map) == 1) {
solution = "analytical"
} else {
if (is.matrix(mkinmodini$coefmat) & eigen) solution = "eigen"
else solution = "deSolve"
}
## always define mkindiff function since most of the time we will use it.
mkindiff <- function(t, state, parms) {
time <- t
diffs <- vector()
for (box in mod_vars)
{
diffname <- paste("d", box, sep="_")
diffs[diffname] <- with(as.list(c(time,state, parms)),
eval(parse(text=mkinmodini$diffs[[box]])))
}
return(list(c(diffs)))
}
library(mkin)
# -----------------------------------------------------------------------
scaleVar <- FALSE
# -----------------------------------------------------------------------
## Get the parametrization.
inpartri <- mkinmodini$inpartri
outpartri <- mkinmodini$outpartri
##
## mkinmodini is an object by mkinmod.full
parms.ini <- mkinmodini$parms.ini
state.ini <- mkinmodini$state.ini
lower <- mkinmodini$lower
upper <- mkinmodini$upper
fixed_parms <- mkinmodini$fixed_parms
fixed_initials <- mkinmodini$fixed_initials
mod_vars <- names(mkinmodini$diffs)
observed <-  mkin_wide_to_long(mkinmodini$residue,time='time')
observed$err <-c(as.matrix(mkinmodini$weightmat))
## Subset dataframe with mapped (modelled) variables
observed <- subset(observed, name %in% names(mkinmodini$map))
## Get names of observed variables
## NOTE HERE: the order may not be the same as the input mkinmod.full differential equations list. ## XXXXX TODO XXXX Reorder them maybe a good idea if the data is given from a data file while the mkinmod.full is defined not following the colnames order, although it is already taken care of in the cost(P) function to reorder the odeini using mod_vars
obs_vars = unique(as.character(observed$name))
## Name the parameters if they are not named yet ## usually they are already names
if(is.null(names(parms.ini))) names(parms.ini) <- mkinmodini$parms
## Name the inital parameter values if they are not named yet
if(is.null(names(state.ini))) names(state.ini) <- mod_vars
## Parameters to be optimised
parms.fixed <- parms.ini[fixed_parms]
optim_parms <- setdiff(names(parms.ini), fixed_parms)
parms.optim <- parms.ini[optim_parms]
## # ### ### ### ### ###
state.ini.fixed <- state.ini[fixed_initials]
optim_initials <- setdiff(names(state.ini), fixed_initials)
state.ini.optim <- state.ini[optim_initials]
state.ini.optim.boxnames <- names(state.ini.optim)
state.ini.fixed.boxnames <- names(state.ini.fixed)
if(length(state.ini.optim) > 0) {
names(state.ini.optim) <- paste('M0',names(state.ini.optim),  sep="_")
}
if(length(state.ini.fixed) > 0) {
names(state.ini.fixed) <- paste('M0',names(state.ini.fixed), sep="_")
}
# -----------------------------------------------------------------------
if (length(mkinmodini$map) == 1) {
solution = "analytical"
} else {
if (is.matrix(mkinmodini$coefmat) & eigen) solution = "eigen"
else solution = "deSolve"
}
## always define mkindiff function since most of the time we will use it.
mkindiff <- function(t, state, parms) {
time <- t
diffs <- vector()
for (box in mod_vars)
{
diffname <- paste("d", box, sep="_")
diffs[diffname] <- with(as.list(c(time,state, parms)),
eval(parse(text=mkinmodini$diffs[[box]])))
}
return(list(c(diffs)))
}
source('C:/Projects2013/KinEvalGit/KinGUII/Improve/kin_mod_cost.r')
environment()
environment(kin_mod_cost) <- environment()
mC <- kin_mod_cost(c(state.ini.optim, parms.optim))
source('C:/Projects2013/KinEvalGit/KinGUII/Improve/kin_mod_cost.r')
environment(kin_mod_cost) <- environment()
mC <- kin_mod_cost(c(state.ini.optim, parms.optim))
missing(abc)
is.null(abc)
source('C:/Projects2013/KinEvalGit/KinGUII/Improve/kin_mod_cost.r')
environment(kin_mod_cost)
mC <- kin_mod_cost(c(state.ini.optim, parms.optim))
source('C:/Projects2013/KinEvalGit/KinGUII/Improve/kin_mod_cost.r')
mC <- kin_mod_cost(c(state.ini.optim, parms.optim))
names(mC)
mC$model
mC$var
mC$residuals
sum(mC$residuals$res^2)
source('C:/Projects2013/KinEvalGit/KinGUII/Improve/cost_kinmod.r')
cost_kinmod(mkinmodini)
search()
fix(FF)
weight
modCost
kingui.control()
state.ini.optim
help(attachLocally)
library(utils)
help(attachLocally)
helP(attachNamespace)
help(attachNamespace)
mC <- kin_mod_cost(c(state.ini.optim, parms.optim),inside=FALSE,plot=TRUE,plottitle)
plottitle=''
mC <- kin_mod_cost(c(state.ini.optim, parms.optim),inside=FALSE,plot=TRUE,plottitle)
mC <- kin_mod_cost(Fit$par,inside=FALSE,plot=TRUE,plottitle)
names(mC)
mC$minlogp
Fit$residuals
sum(Fit$residuals^2)
mC0 <- kin_mod_cost(c(state.ini.optim, parms.optim),inside=FALSE,plot=TRUE,plottitle)
mC <- kin_mod_cost(Fit$par,inside=FALSE,plot=TRUE,plottitle)
mC
sum(mC$residuals$res^2)
summary(Fit)
oldpar <- par()
par(mfrow=c(1,2))
mC0 <- kin_mod_cost(c(state.ini.optim, parms.optim),inside=FALSE,plot=TRUE,plottitle)
mC <- kin_mod_cost(Fit$par,inside=FALSE,plot=TRUE,plottitle)
names(Fit)
comparison$SSR <- c(mC0$model,mC11$model)
if(!is.null(Fit)) mC1 <- kin_mod_cost(Fit$par,inside=FALSE,plot=TRUE,plottitle)
comparison <- NULL
comparison$SSR <- c(mC0$model,mC1$model)
comparison
mC$var
rbind(c(mC0$model,mC1$model),mC$var[c("name","SSR")]
)
comparison$SSR <- rbind(c(mC0$model,mC1$model),mC0$var[c("name","SSR")])
comparison$SSR[1,1] <- "ALL"
comparison$SSR
comparison$SSR[1,1]
comparison$SSR[1,1] <- "ALL"
comparison$SSR[,1] <- as.character(comparison$SSR[,1])
comparison$SSR[1,1] <- "ALL"
comparison$SSR
comparison$SSR <- rbind(c(mC0$model,mC1$model),mC0$var[c("name","SSR")],mC1$var[c("name","SSR")])
comparison$SSR[,1] <- as.character(comparison$SSR[,1])
comparison$SSR[1,1] <- "ALL"
comparison$SSR
comparison$SSR <- rbind(c(mC0$model,mC1$model),mC0$var[c("name","SSR")])
comparison$SSR[,1] <- as.character(comparison$SSR[,1])
comparison$SSR[1,1] <- "ALL"
comparison$SSR <- cbind(comparison$SSR,mC1$var[c("name","SSR")])
comparison$SSR <- rbind(c(mC0$model,mC1$model),mC0$var[c("name","SSR")])
comparison$SSR[,1] <- as.character(comparison$SSR[,1])
comparison$SSR[1,1] <- "ALL"
comparison$SSR
mC0$var[c("name","SSR")]
cbind(mC0$var[c("name","SSR")],mC1$var[c("name","SSR")])
rbind(mC0$var[c("name","SSR")],mC1$var[c("SSR")])
c(mC0$model,mC1$model)
mC0$var[c("name","SSR")]
t(mC0$var[c("name","SSR")])
dim(t(mC0$var[c("name","SSR")]))
mC1$var[c("SSR")]
dim(mC1$var[c("SSR")])
rbind(mC0$var[c("SSR")],mC1$var[c("SSR")]
)
rbind(t(mC0$var[c("SSR")]),t(mC1$var[c("SSR")])
)
cbind(c(mC0$model,mC1$model),rbind(t(mC0$var[c("SSR")]),t(mC1$var[c("SSR")])))
mC0$var
c("ALL",mC0$var$name)
colnames(comparison$SSR) <- c("ALL",as.character(mC0$var$name))
as.character(mC0$var$name)
c("ALL",as.character(mC0$var$name))
colnames(comparison$SSR) <- c("ALL",as.character(mC0$var$name))
comparison$SSR <- cbind(c(mC0$model,mC1$model),rbind(t(mC0$var[c("SSR")]),t(mC1$var[c("SSR")])))
rownames(comparison$SSR) <- c("Initial Model","Newly Fitted Model")
colnames(comparison$SSR) <- c("ALL",as.character(mC0$var$name))
comparison$SSR
mC
err
observed
observed$err <- rep(c)
observed$err <- rep(c)
observed$err <- c(rep(1,14),rep(2,14))
observed
mC0 <- kin_mod_cost(c(state.ini.optim, parms.optim),inside=FALSE,plot=TRUE,plottitle)
mC0
comparison
comparison$SSR.unweighted <- cbind(c(NA,NA),rbind(t(mC0$var[c("SSR.unweighted")]),
t(mC1$var[c("SSR.unweighted")])))
rownames(comparison$SSR.unweighted) <- c("Initial Model","Newly Fitted Model")
colnames(comparison$SSR.unweighted) <- c("ALL",as.character(mC0$var$name))
comparison$SSR.unweighted
Fit
mC0 <- kin_mod_cost(c(state.ini.optim, parms.optim),inside=FALSE,plot=TRUE,plottitle='Initial Model')
if(!is.null(Fit)) mC1 <- kin_mod_cost(Fit$par,inside=FALSE,plot=TRUE,plottitle='Fitted Model')
apply(comparison$SSR.unweighted[,2:3],1,sum)
comparison$SSR.unweighted[,1]<- apply(comparison$SSR.unweighted[,2:3],1,sum)
comparison$SSR.unweighted
Fit
sum(Fit$data$residuals^2)
sum(Fit$data$residuals^2/Fit$data$err-std^2)
sum(Fit$data$residuals^2/Fit$data$"err-std"^2)
Fit$data$residuals^2
Fit$data$residuals
Fit$data$residual
sum(Fit$data$residuals^2/Fit$data$"err-std"^2)
sum(Fit$data$residual^2/Fit$data$"err-std"^2)
Fit$errmin
class(c(3,2,3))
class(Fit)
obs_vars
install.packages("codetools")
library(devtools)
has_devel()
setwd("C:/Projects2013/KinEvalGit/")
roxygenize('KineticEval')
library(roxygen2)
library(roxygen2)
roxygenize('KineticEval')
check('KineticEval')
complex <- mkinmod.full(
parent = list(type = "SFO", to = c("A1", "B1", "C1"), sink = FALSE),
A1 = list(type = "SFO", to = "A2"),
B1 = list(type = "SFO"),
C1 = list(type = "SFO"),
A2 = list(type = "SFO"),
inpartri='default',
outpartri='default',
data=schaefer07_complex_case,
weight=NULL)
library(methods)
library(utils)
roxygenize('KineticEval')
check('KineticEval')
roxygenize('KineticEval')
check('KineticEval')
roxygenize('KineticEval')
check('KineticEval')
getwd()
schaefer07_complex_case
mkin::schaefer07_complex_case
roxygenize('KineticEval')
check('KineticEval')
roxygenize('KineticEval')
check('KineticEval')
library(mkin)
roxygenize('KineticEval')
check('KineticEval')
roxygenize('KineticEval')
roxygenize('KineticEval')
check('KineticEval')
roxygenize('KineticEval')
check('KineticEval')
SFO_SFO_full <- mkinmod.full(Parent = list(type = "SFO", to = "Metab", sink = TRUE,
k = list(ini = 0.1,
fixed = 0,
lower = 0,
upper = Inf),
M0 = list(ini = 195,
fixed = 0,
lower = 0,
upper = Inf),
FF = list(ini = c(.1),
fixed = c(0),
lower = c(0),
upper = c(1)),
time=c(0.0,2.8,   6.2,  12.0,  29.2,  66.8,  99.8,
127.5, 154.4, 229.9, 272.3, 288.1, 322.9),
residue = c( 157.3, 206.3, 181.4, 223.0, 163.2,
144.7,  85.0,  76.5,  76.4,  51.5,  45.5,  47.3, 42.7)),
Metab = list(type = "SFO",
k = list(ini = 0.1   ,
fixed = 0,
lower = 0,
upper = Inf),
M0 = list(ini = 0,
fixed = 1,
lower = 0,
upper = Inf),
residue =c( 0.0,  0.0,  0.0,  1.6,  4.0, 12.3, 13.5,
12.7, 11.4, 11.6, 10.9,  9.5,  7.6))
)
options(error=recover)
SFO_SFO_full <- mkinmod.full(Parent = list(type = "SFO", to = "Metab", sink = TRUE,
k = list(ini = 0.1,
fixed = 0,
lower = 0,
upper = Inf),
M0 = list(ini = 195,
fixed = 0,
lower = 0,
upper = Inf),
FF = list(ini = c(.1),
fixed = c(0),
lower = c(0),
upper = c(1)),
time=c(0.0,2.8,   6.2,  12.0,  29.2,  66.8,  99.8,
127.5, 154.4, 229.9, 272.3, 288.1, 322.9),
residue = c( 157.3, 206.3, 181.4, 223.0, 163.2,
144.7,  85.0,  76.5,  76.4,  51.5,  45.5,  47.3, 42.7)),
Metab = list(type = "SFO",
k = list(ini = 0.1   ,
fixed = 0,
lower = 0,
upper = Inf),
M0 = list(ini = 0,
fixed = 1,
lower = 0,
upper = Inf),
residue =c( 0.0,  0.0,  0.0,  1.6,  4.0, 12.3, 13.5,
12.7, 11.4, 11.6, 10.9,  9.5,  7.6))
)
ls()
ls()
*tmp*
weightmat
time
length(time)
length(residue)
residue
eval("*tmp*")
source('C:/Projects2013/KinEvalGit/KineticEval/R/mkinmod.full.r')
SFO_SFO_full <- mkinmod.full(Parent = list(type = "SFO", to = "Metab", sink = TRUE,
k = list(ini = 0.1,
fixed = 0,
lower = 0,
upper = Inf),
M0 = list(ini = 195,
fixed = 0,
lower = 0,
upper = Inf),
FF = list(ini = c(.1),
fixed = c(0),
lower = c(0),
upper = c(1)),
time=c(0.0,2.8,   6.2,  12.0,  29.2,  66.8,  99.8,
127.5, 154.4, 229.9, 272.3, 288.1, 322.9),
residue = c( 157.3, 206.3, 181.4, 223.0, 163.2,
144.7,  85.0,  76.5,  76.4,  51.5,  45.5,  47.3, 42.7)),
Metab = list(type = "SFO",
k = list(ini = 0.1   ,
fixed = 0,
lower = 0,
upper = Inf),
M0 = list(ini = 0,
fixed = 1,
lower = 0,
upper = Inf),
residue =c( 0.0,  0.0,  0.0,  1.6,  4.0, 12.3, 13.5,
12.7, 11.4, 11.6, 10.9,  9.5,  7.6))
)
names(parms.ini) <- parms
names(parms.lower) <- parms
names(parms.upper) <- parms
parms.fixed <- parms.ini[fixed_parms]
optim_parms <- setdiff(names(parms.ini), fixed_parms)
parms.optim <- parms.ini[optim_parms]
parms.lower <- parms.lower[optim_parms]
parms.upper <- parms.upper[optim_parms]
names(state.ini) <- obs_vars
names(state.lower) <- obs_vars
names(state.upper) <- obs_vars
state.ini.fixed <- state.ini[fixed_initials]
optim_initials <- setdiff(names(state.ini), fixed_initials)
state.ini.optim <- state.ini[optim_initials]
state.lower <- state.lower[optim_initials]
state.upper <- state.upper[optim_initials]
lower <- c(state.lower,parms.lower)
upper <- c(state.upper,parms.upper)
colnames(weightmat) <- obs_vars
source('C:/Projects2013/KinEvalGit/KineticEval/R/mkinmod.full.r')
SFO_SFO_full <- mkinmod.full(Parent = list(type = "SFO", to = "Metab", sink = TRUE,
k = list(ini = 0.1,
fixed = 0,
lower = 0,
upper = Inf),
M0 = list(ini = 195,
fixed = 0,
lower = 0,
upper = Inf),
FF = list(ini = c(.1),
fixed = c(0),
lower = c(0),
upper = c(1)),
time=c(0.0,2.8,   6.2,  12.0,  29.2,  66.8,  99.8,
127.5, 154.4, 229.9, 272.3, 288.1, 322.9),
residue = c( 157.3, 206.3, 181.4, 223.0, 163.2,
144.7,  85.0,  76.5,  76.4,  51.5,  45.5,  47.3, 42.7)),
Metab = list(type = "SFO",
k = list(ini = 0.1   ,
fixed = 0,
lower = 0,
upper = Inf),
M0 = list(ini = 0,
fixed = 1,
lower = 0,
upper = Inf),
residue =c( 0.0,  0.0,  0.0,  1.6,  4.0, 12.3, 13.5,
12.7, 11.4, 11.6, 10.9,  9.5,  7.6))
)
roxygenize('KineticEval')
check('KineticEval')
roxygenize('KineticEval')
check('KineticEval')
options()
help(options)
options(error=stop)
check('KineticEval')
library(ade4)
data(meaudret)
meaudret
library(vegan)
library(vegan)
data(dune)
m <- metaMDS(dune)
help(metaMDS)
m
dune
plot(m, type="t")
ord <- rda(dune)
ord
plot(ord)
plot(ord,scale=1)
plot(ord)
plot(ord,scale=3)
plot(ord)
plot(ord,scal=3)
plot(ord,scal=1)
plot(ord,scal=-1)
plot(ord,scal=-2)
plot(ord,scal=2)
biplot(ord,scal=1)
biplot(ord,scal=2)
biplot(ord,scal=-2)
plot(procrustes(m, ord))
data(pyrifos)
example(pyrifos)
dca <- decorana(pyrifos)
dca
cap <- cca(pyrifos)
cap
plot(procrustes(cap, dca))
plot(procrustes(cap, dca,choices=1:2))
plot(procrustes(cap, dca))
ordirgl(dca, size = 3, col = as.numeric(dose))
install.packages("rgl")
data(dune.env)
dune.env
library(devtools)
has_devel()
setwd("C:/Projects2013/KinEvalGit/")
setwd('C:/Users/z.gao/Documents/GitHub/')
library(roxygen2)
roxygenize('KineticEval')
check('KineticEval')
document('KineticEval')
document('KineticEval')
roxygenize('KineticEval')
roxygenize('KineticEval')
check('KineticEval')
library(devtools)
has_devel()
install_github("pryr")
library(roxygen2)
setwd('C:/Users/z.gao/Documents/GitHub/')
roxygenize('KineticEval')
install.packages("BB")
roxygenize('KineticEval')
check('KineticEval')
install.packages(c("ucminf", "Rcgmin", "Rvmmin", "setRNG"))
check('KineticEval')
help(ode)
check('KineticEval')
check('KineticEval')
check('KineticEval')
check('KineticEval')
roxygenize('KineticEval')
check('KineticEval')
document('KineticEval')
check('KineticEval',cleanup=FALSE)
check('KineticEval',cleanup=FALSE)
roxygenize('KineticEval')
check('KineticEval',cleanup=FALSE)
roxygenize('KineticEval')
check('KineticEval',cleanup=FALSE)
help(optimx)
help(nls.lm)
check('KineticEval',cleanup=FALSE)
check('KineticEval',cleanup=FALSE)
install_github("KineticEval")
install_github("KineticEval",username="zhenglei-gao")
install_github("KineticEval",username="zhenglei-gao")
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
author('mydeck')
slidify("index.Rmd")
slidify("index.Rmd")
install_github("KineticEval",username="zhenglei-gao")
build("KineticEval")
setwd('C:/Users/z.gao/Documents/GitHub/')
build("KineticEval")
