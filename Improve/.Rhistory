roxygenize('KineticEval')
check('KineticEval',cleanup=TRUE)
build('KineticEval')
install("KineticEval")
tmp  <- function(x, coef){
a <- coef[1]
b <- coef[2]
a +b*x
}
x <- 1:10
yeps <- y + rnorm(length(y), sd = 0.01)  # added noise
nls(yeps ~ a + b*x, start = list(a = 0.12345, b = 0.54321))#
nls(yeps ~ tmp(x,coef), start = list(coef = c(0.12345, 0.54321)))
y <- 2*x + 3                            # perfect fit
yeps <- y + rnorm(length(y), sd = 0.01)  # added noise
nls(yeps ~ a + b*x, start = list(a = 0.12345, b = 0.54321))#
nls(yeps ~ tmp(x,coef), start = list(coef = c(0.12345, 0.54321)))
source('~/Documents/GitHub/StudyKin/Improve/kin_mod.r', echo=TRUE)
inpartri <- mkinmodini$inpartri
outpartri <- mkinmodini$outpartri
##
## mkinmodini is an object by mkinmod.full
parms.ini <- mkinmodini$parms.ini
state.ini <- mkinmodini$state.ini
lower <- mkinmodini$lower
upper <- mkinmodini$upper
fixed_parms <- mkinmodini$fixed_parms
fixed_initials <- mkinmodini$fixed_initials
mod_vars <- names(mkinmodini$diffs)
observed <-  mkin_wide_to_long(mkinmodini$residue,time='time')
observed$err <-c(as.matrix(mkinmodini$weightmat))
## Subset dataframe with mapped (modelled) variables
observed <- subset(observed, name %in% names(mkinmodini$map))
## Get names of observed variables
## NOTE HERE: the order may not be the same as the input mkinmod.full differential equations list. ## XXXXX TODO XXXX Reorder them maybe a good idea if the data is given from a data file while the mkinmod.full is defined not following the colnames order, although it is already taken care of in the cost(P) function to reorder the odeini using mod_vars
obs_vars = unique(as.character(observed$name))
## Name the parameters if they are not named yet ## usually they are already names
if(is.null(names(parms.ini))) names(parms.ini) <- mkinmodini$parms
## Name the inital parameter values if they are not named yet
if(is.null(names(state.ini))) names(state.ini) <- mod_vars
## Parameters to be optimised
parms.fixed <- parms.ini[fixed_parms]
optim_parms <- setdiff(names(parms.ini), fixed_parms)
parms.optim <- parms.ini[optim_parms]
## # ### ### ### ### ###
state.ini.fixed <- state.ini[fixed_initials]
optim_initials <- setdiff(names(state.ini), fixed_initials)
state.ini.optim <- state.ini[optim_initials]
state.ini.optim.boxnames <- names(state.ini.optim)
state.ini.fixed.boxnames <- names(state.ini.fixed)
if(length(state.ini.optim) > 0) {
names(state.ini.optim) <- paste('M0',names(state.ini.optim),  sep="_")
}
if(length(state.ini.fixed) > 0) {
names(state.ini.fixed) <- paste('M0',names(state.ini.fixed), sep="_")
}
oldparms <- c(state.ini.optim,parms.optim)
oldparms
environment(kin_mod) <- environment()
kin_mod(P=oldparms)
if (length(mkinmodini$map) == 1) {
solution = "analytical"
} else {
if (is.matrix(mkinmodini$coefmat) & eigen) solution = "eigen"
else solution = "deSolve"
}
## always define mkindiff function since most of the time we will use it.
mkindiff <- function(t, state, parms) {
time <- t
diffs <- vector()
for (box in mod_vars)
{
diffname <- paste("d", box, sep="_")
diffs[diffname] <- with(as.list(c(time,state, parms)),
eval(parse(text=mkinmodini$diffs[[box]])))
}
return(list(c(diffs)))
}
solution
solution = "deSolve"
eigen <- FALSE
if (length(mkinmodini$map) == 1) {
solution = "analytical"
} else {
if (is.matrix(mkinmodini$coefmat) & eigen) solution = "eigen"
else solution = "deSolve"
}
solution
mkinidff
mkindiff <- function(t, state, parms) {
time <- t
diffs <- vector()
for (box in mod_vars)
{
diffname <- paste("d", box, sep="_")
diffs[diffname] <- with(as.list(c(time,state, parms)),
eval(parse(text=mkinmodini$diffs[[box]])))
}
return(list(c(diffs)))
}
mkindiff
environment(kin_mod) <- environment()
kin_mod(P=oldparms)
odesolver='lsoda'
atol=1e-9
rtol=1e-10
kin_mod(P=oldparms)
out_transformed
observed
out_predicted
reshape(out)
out
reshape(out_transformed)
reshape(out_transformed,times=observed$time)
rtol=1e-10
summary(Indometh)
head(Indometh)
wide <- reshape(Indometh, v.names = "conc", idvar = "Subject",
timevar = "time", direction = "wide")
wide
reshape(wide, direction = "long")
outtimes
source('~/Documents/GitHub/StudyKin/Improve/kin_mod.r', echo=TRUE)
kin_mod(P=oldparms)
duplicated(observed$time)
observed
names(mkinmodini)
mkinmodini$data0
v
q()
q
Q
q()
library(sos)
install.packages("sos")
findFun("nls2")
findFunction(nls2)
findFunction("nls2")
library(sos)
findFn(nls2)
findFn("nls2")
library(pracma)
install.packages("pracma")
help(lsqnonlin)
library(pracma)
help(lsqnonlin)
y <- c(5.5199668,  1.5234525,  3.3557000,  6.7211704,  7.4237955,  1.9703127,
4.3939336, -1.4380091,  3.2650180,  3.5760906,  0.2947972,  1.0569417)
x <- c(1,   0,   0,   4,   3,   5,  12,  10,  12, 100, 100, 100)
# Define target function as difference
f <- function(b)
b[1] * (exp((b[2] - x)/b[3]) * (1/b[3]))/(1 + exp((b[2] - x)/b[3]))^2 - y
x0 <- c(21.16322, 8.83669, 2.957765)
lsqnonlin(f, x0)
nls(y ~ a*(exp((b-x)/c)*(1/c))/(1 + exp((b-x)/c))^2,
start=list(a=21.16322, b=8.83669, c=2.957765), algorithm = "plinear")
nls.lm(y ~ a*(exp((b-x)/c)*(1/c))/(1 + exp((b-x)/c))^2,
start=list(a=21.16322, b=8.83669, c=2.957765))
library(minpack.lm)
nls.lm(y ~ a*(exp((b-x)/c)*(1/c))/(1 + exp((b-x)/c))^2,
start=list(a=21.16322, b=8.83669, c=2.957765))
help(nls.lm)
nls.lm(par=x0,fn=f)
lsqnonlin(f, x0)        # ssq 50.50144 at c(36.133144, 2.572373, 1.079811)
andrew
inpartri
observed
kin_mod(P=oldparms)
library(KineticEval)
kin_mod(P=oldparms)
reshape(out_transformed,direction="long")
reshape(out_transformed,direction="long",timevar="time")
reshape(out_transformed,direction="long",timevar="time",varying=list(2,3))
out_transformed
reshape(out_transformed,direction="long",varying=list("Parent","Metab"),idvar="name")
wide <- reshape(Indometh, v.names = "conc", idvar = "Subject",
timevar = "time", direction = "wide")
wide
wide <- reshape(Indometh, v.names = "conc", idvar = "Subject",
timevar = "time", direction = "wide")
wide
reshape(wide, direction = "long")
reshape(wide, idvar = "Subject", varying = list(2:12),
v.names = "conc", direction = "long")
mkin_wide_to_long
kin_mod(P=oldparms)
mkin_wide_to_long(out_transformed)
mkin_wide_to_long(out_transformed,time="time")
Mod <- mkin_wide_to_long(out_transformed,time="time")
merge(observed,Mod)
names(Mod)
names(Mod) <- c("name",  "time", "yMod")
merge(observed,Mod)
merge(observed,Mod,by.x=c("name","time"))
merge(observed,Mod,by.x=c("name","time"),sort=FALSE)
source('~/Documents/GitHub/StudyKin/Improve/kin_mod.r', echo=TRUE)
kin_mod(P=oldparms)
nls(observed$value ~ kin_mod(P=oldparms))
nls(observed$value ~ kin_mod(),start=oldparms)
nls(observed$value ~ kin_mod(P),start=list(P=oldparms))
observed$value
x <- 1:10
y <- 2*x + 3                            # perfect fit
yeps <- y + rnorm(length(y), sd = 0.01)  # added noise
tmp1  <- function(coef){
a <- coef[1]
b <- coef[2]
a +b*x
}
nls(yeps ~ tmp1(coef), start = list(coef = c(0.12345, 0.54321)))
kin_mod(P=oldparms)
source('~/Documents/GitHub/StudyKin/Improve/kin_mod.r', echo=TRUE)
kin_mod(P=oldparms)
kin_mod(P=oldparms)-y
y <- observed$value
kin_mod(P=oldparms)-y
y
observed$value
observed
nls(y ~ kin_mod(P),start=list(P=oldparms))
oldparms
options(error=recover)
source('~/Documents/GitHub/StudyKin/Improve/kin_mod.r', echo=TRUE)
nls(y ~ kin_mod(P),start=list(P=oldparms))
source('~/Documents/GitHub/StudyKin/Improve/kin_mod.r', echo=TRUE)
nls(y ~ kin_mod(P,pnames=names(oldparms)),start=list(P=oldparms))
Fit$par
a <- nls(y ~ kin_mod(P,pnames=names(oldparms)),start=list(P=oldparms))
summary(a)
f <- function(P){
observed$value-kin_mod(P)
}
nls.lm(par=oldparms,fn=f)
oldparms
lower
upper
a <- nls(y ~ kin_mod(P,pnames=names(oldparms)),start=list(P=oldparms),lower=lower,upper=upper)
summary(a)
a <- nls(y ~ kin_mod(P,pnames=names(oldparms)),start=list(P=oldparms),lower=lower,upper=upper,algorithm=port)
a <- nls(y ~ kin_mod(P,pnames=names(oldparms)),start=list(P=oldparms),lower=lower,upper=upper,algorithm="port")
summary(a)
nls.lm(par=oldparms,fn=f,lower=lower,uppper=upper)
library(devtools)
has_devel()
####
# -------------------------------------------------------
library(roxygen2)
# upper directory of the package
setwd('C:/Users/z.gao/Documents/GitHub/')
roxygenize('KineticEval')
check('KineticEval',cleanup=TRUE)
build('KineticEval')
install("KineticEval")
b <- nlsLM(y ~ kin_mod(P,pnames=names(oldparms)),start=list(P=oldparms),lower=lower,upper=upper)
length(oldparms)
length(lower)
b <- nlsLM(y ~ kin_mod(P,pnames=names(oldparms)),start=oldparms,lower=lower,upper=upper)
b <- nlsLM(y ~ kin_mod(P,pnames=names(oldparms)),start=list(P=oldparms))#,lower=lower,upper=upper)
nls.lm(par=oldparms,lower=lower,upper=upper,fn=f)
q()
getwd()
load("ex1.rda")
ex1
load("ex2.rda")
load("ex1_a.rda")
mkinmodini <- ex2
inpartri <- mkinmodini$inpartri
outpartri <- mkinmodini$outpartri
##
## mkinmodini is an object by mkinmod.full
parms.ini <- mkinmodini$parms.ini
state.ini <- mkinmodini$state.ini
lower <- mkinmodini$lower
upper <- mkinmodini$upper
fixed_parms <- mkinmodini$fixed_parms
fixed_initials <- mkinmodini$fixed_initials
mod_vars <- names(mkinmodini$diffs)
observed <-  mkin_wide_to_long(mkinmodini$residue,time='time')
observed$err <-c(as.matrix(mkinmodini$weightmat))
## Subset dataframe with mapped (modelled) variables
observed <- subset(observed, name %in% names(mkinmodini$map))
## Get names of observed variables
## NOTE HERE: the order may not be the same as the input mkinmod.full differential equations list. ## XXXXX TODO XXXX Reorder them maybe a good idea if the data is given from a data file while the mkinmod.full is defined not following the colnames order, although it is already taken care of in the cost(P) function to reorder the odeini using mod_vars
obs_vars = unique(as.character(observed$name))
## Name the parameters if they are not named yet ## usually they are already names
if(is.null(names(parms.ini))) names(parms.ini) <- mkinmodini$parms
## Name the inital parameter values if they are not named yet
if(is.null(names(state.ini))) names(state.ini) <- mod_vars
## Parameters to be optimised
parms.fixed <- parms.ini[fixed_parms]
optim_parms <- setdiff(names(parms.ini), fixed_parms)
parms.optim <- parms.ini[optim_parms]
## # ### ### ### ### ###
state.ini.fixed <- state.ini[fixed_initials]
optim_initials <- setdiff(names(state.ini), fixed_initials)
state.ini.optim <- state.ini[optim_initials]
state.ini.optim.boxnames <- names(state.ini.optim)
state.ini.fixed.boxnames <- names(state.ini.fixed)
if(length(state.ini.optim) > 0) {
names(state.ini.optim) <- paste('M0',names(state.ini.optim),  sep="_")
}
if(length(state.ini.fixed) > 0) {
names(state.ini.fixed) <- paste('M0',names(state.ini.fixed), sep="_")
}
eigen <- FALSE
oldparms <- c(state.ini.optim,parms.optim)
if (length(mkinmodini$map) == 1) {
solution = "analytical"
} else {
if (is.matrix(mkinmodini$coefmat) & eigen) solution = "eigen"
else solution = "deSolve"
}
## always define mkindiff function since most of the time we will use it.
mkindiff <- function(t, state, parms) {
time <- t
diffs <- vector()
for (box in mod_vars)
{
diffname <- paste("d", box, sep="_")
diffs[diffname] <- with(as.list(c(time,state, parms)),
eval(parse(text=mkinmodini$diffs[[box]])))
}
return(list(c(diffs)))
}
#####################
ctr=kingui.control()
#### Control parameters ####
method <- ctr$method
odesolver <- ctr$odesolver
atol <- ctr$atol
rtol <- ctr$rtol
control <- ctr$control
marqctr <- ctr$marqctr
goMarq <- ctr$goMarq
submethod <- ctr$submethod
Hmethod1 <- ctr$Hmethod1
Hmethod2 <- ctr$Hmethod2
####################
environment(kin_mod) <- environment()
oldparms <- c(state.ini.optim,parms.optim)
y <- observed$value
kin_mod(P=oldparms)-y
y <- observed$value
library(KineticEval)
inpartri <- mkinmodini$inpartri
outpartri <- mkinmodini$outpartri
##
## mkinmodini is an object by mkinmod.full
parms.ini <- mkinmodini$parms.ini
state.ini <- mkinmodini$state.ini
lower <- mkinmodini$lower
upper <- mkinmodini$upper
fixed_parms <- mkinmodini$fixed_parms
fixed_initials <- mkinmodini$fixed_initials
mod_vars <- names(mkinmodini$diffs)
observed <-  mkin_wide_to_long(mkinmodini$residue,time='time')
observed$err <-c(as.matrix(mkinmodini$weightmat))
## Subset dataframe with mapped (modelled) variables
observed <- subset(observed, name %in% names(mkinmodini$map))
## Get names of observed variables
## NOTE HERE: the order may not be the same as the input mkinmod.full differential equations list. ## XXXXX TODO XXXX Reorder them maybe a good idea if the data is given from a data file while the mkinmod.full is defined not following the colnames order, although it is already taken care of in the cost(P) function to reorder the odeini using mod_vars
obs_vars = unique(as.character(observed$name))
## Name the parameters if they are not named yet ## usually they are already names
if(is.null(names(parms.ini))) names(parms.ini) <- mkinmodini$parms
## Name the inital parameter values if they are not named yet
if(is.null(names(state.ini))) names(state.ini) <- mod_vars
## Parameters to be optimised
parms.fixed <- parms.ini[fixed_parms]
optim_parms <- setdiff(names(parms.ini), fixed_parms)
parms.optim <- parms.ini[optim_parms]
## # ### ### ### ### ###
state.ini.fixed <- state.ini[fixed_initials]
optim_initials <- setdiff(names(state.ini), fixed_initials)
state.ini.optim <- state.ini[optim_initials]
state.ini.optim.boxnames <- names(state.ini.optim)
state.ini.fixed.boxnames <- names(state.ini.fixed)
if(length(state.ini.optim) > 0) {
names(state.ini.optim) <- paste('M0',names(state.ini.optim),  sep="_")
}
if(length(state.ini.fixed) > 0) {
names(state.ini.fixed) <- paste('M0',names(state.ini.fixed), sep="_")
}
eigen <- FALSE
oldparms <- c(state.ini.optim,parms.optim)
if (length(mkinmodini$map) == 1) {
solution = "analytical"
} else {
if (is.matrix(mkinmodini$coefmat) & eigen) solution = "eigen"
else solution = "deSolve"
}
## always define mkindiff function since most of the time we will use it.
mkindiff <- function(t, state, parms) {
time <- t
diffs <- vector()
for (box in mod_vars)
{
diffname <- paste("d", box, sep="_")
diffs[diffname] <- with(as.list(c(time,state, parms)),
eval(parse(text=mkinmodini$diffs[[box]])))
}
return(list(c(diffs)))
}
#####################
ctr=kingui.control()
#### Control parameters ####
method <- ctr$method
odesolver <- ctr$odesolver
atol <- ctr$atol
rtol <- ctr$rtol
control <- ctr$control
marqctr <- ctr$marqctr
goMarq <- ctr$goMarq
submethod <- ctr$submethod
Hmethod1 <- ctr$Hmethod1
Hmethod2 <- ctr$Hmethod2
####################
environment(kin_mod) <- environment()
oldparms <- c(state.ini.optim,parms.optim)
y <- observed$value
kin_mod(P=oldparms)-y
y <- observed$value
pnames <- names(oldparms)
oldparms
obj1 <- function(P,...)
{
if(is.null(names(P))) names(P) <- pnames
0.5*sum((kin_mod(P,...)-y)^2,na.rm=TRUE)
}
## utilities
gradfun_ls <- function(modelfun,par,obs,...)
{
if(is.null(names(par))) names(par) <- pnames
np <- length(par)
resfun <- function(par,obs, ...){
modelfun(par,...)-obs
}
res <- resfun(par,obs=obs)
Jmat <- jacobian(modelfun,x=par)
## when there are NA's, not included in the Jaobian!!!
id <- which(is.na(res))
g <- t(Jmat[-id,])%*%res[-id]
return(g)
}
gr1 <- function(P,...)
{
g<-gradfun_ls(modelfun=kin_mod,par=P,obs=observed$value)
g
}
c <- trust.optim(x=oldparms,fn=obj1,gr=gr1,method="SR1")
library(trustOptim)
c <- trust.optim(x=oldparms,fn=obj1,gr=gr1,method="SR1")
library(numDeriv)
c <- trust.optim(x=oldparms,fn=obj1,gr=gr1,method="SR1")
c
source('~/Documents/GitHub/StudyKin/Improve/TRR.r', echo=TRUE)
t <- 1:10
objfun <- objfun_ls(farb,c(3,1),obs=y)
x <- c(3,1)
objfun <- objfun_ls(farb,c(3,1),obs=y)
options(error=recover)
objfun <- objfun_ls(farb,c(3,1),obs=y)
Jmat <- jacobian(modelfun,x=par)
g <- t(Jmat)%*%res
B <- t(Jmat)%*%Jmat
}
source('~/Documents/GitHub/StudyKin/Improve/TRR.r', echo=TRUE)
objfun
objfun <- objfun_ls(farb,c(3,1),obs=y,Q=TRUE)
objfun
source('~/Documents/GitHub/StudyKin/Improve/TRR.r', echo=TRUE)
objfun <- objfun_ls(farb,c(3,1),obs=y,Q=TRUE)
M
M[upper.tri(M)] <- t(M)[upper.tri(M)]
M
source('~/Documents/GitHub/StudyKin/Improve/TRR.r', echo=TRUE)
obj <- function(par,...)
{
return(objfun_ls(modelfun=kin_mod,par,obs,Q=TRUE,pnames=pnames...))
}
obj(par=oldparms)
obj <- function(par,...)
{
return(objfun_ls(modelfun=kin_mod,par,obs=obs,Q=TRUE,pnames=pnames...))
}
obj(par=oldparms)
obs <- y
y
observed$value
obj <- function(par,...)
{
return(objfun_ls(modelfun=kin_mod,par,obs=observed$value,Q=TRUE,pnames=pnames...))
}
obj(par=oldparms)
source('~/Documents/GitHub/StudyKin/Improve/TRR.r', echo=TRUE)
obj <- function(par,...)
{
return(objfun_ls(modelfun=kin_mod,par,obs=observed$value,Q=TRUE,pnames=pnames...))
}
obj(par=oldparms)
source('~/Documents/GitHub/StudyKin/Improve/TRR.r', echo=TRUE)
obj <- function(par,Q=FALSE,...)
{
return(objfun_ls(modelfun=kin_mod,par,obs=observed$value,Q=Q,pnames=pnames...))
}
obj(par=oldparms)
d <- trust(objfun=obj,parinit=oldparms,rinit=1,rmax=100)
library(trust)
d <- trust(objfun=obj,parinit=oldparms,rinit=1,rmax=100)
d
q()
load("~/Documents/GitHub/StudyKin/Improve/trust-region.Rmd")
q()
