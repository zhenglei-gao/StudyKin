check('KineticEval')
library(devtools)
has_devel()
install_github("pryr")
library(roxygen2)
setwd('C:/Users/z.gao/Documents/GitHub/')
roxygenize('KineticEval')
install.packages("BB")
roxygenize('KineticEval')
check('KineticEval')
install.packages(c("ucminf", "Rcgmin", "Rvmmin", "setRNG"))
check('KineticEval')
help(ode)
check('KineticEval')
check('KineticEval')
check('KineticEval')
check('KineticEval')
roxygenize('KineticEval')
check('KineticEval')
document('KineticEval')
check('KineticEval',cleanup=FALSE)
check('KineticEval',cleanup=FALSE)
roxygenize('KineticEval')
check('KineticEval',cleanup=FALSE)
roxygenize('KineticEval')
check('KineticEval',cleanup=FALSE)
help(optimx)
help(nls.lm)
check('KineticEval',cleanup=FALSE)
check('KineticEval',cleanup=FALSE)
install_github("KineticEval")
install_github("KineticEval",username="zhenglei-gao")
install_github("KineticEval",username="zhenglei-gao")
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
author('mydeck')
slidify("index.Rmd")
slidify("index.Rmd")
install_github("KineticEval",username="zhenglei-gao")
build("KineticEval")
setwd('C:/Users/z.gao/Documents/GitHub/')
build("KineticEval")
if ("devtools" %in% loadedNamespaces()) {
stop("You must restart R before installing devtools")
}
url <- "https://gist.github.com/raw/4506250/devtools.zip"
temp <- file.path(tempdir(), "devtools.zip")
setInternet2(TRUE)
suppressWarnings(download.file(url, temp, mode = "wb"))
install.packages(temp, repos = NULL)
file.remove(temp)
library(devtools)
setwd('C:/Users/z.gao/Documents/GitHub/')
library(slidify)
check('KineticEval')
library(roxygen2)
roxygenize('KineticEval')
check('KineticEval')
getwd
getwd()
setwd("E:/KinEvalGit/")
check('KineticEval')
autolayout
setwd('C:/Users/z.gao/Documents/GitHub/')
roxygenize('KineticEval')
check('KineticEval')
build('KineticEval')
build('KineticEval')
check('KineticEval')
install_github("KineticEval","zhenglei-gao")
help(autolayout)
help(IRLSkinfit.full)
IRLSkinfit.full
document('KineticEval')
help(IRLSkinfit.full)
roxygen("KineticEval",clean=TRUE)
library(roxygen)
install_github("KineticEval","zhenglei-gao")
install_github("KineticEval","zhenglei-gao")
install_github("KineticEval","zhenglei-gao")
(.packages())
remove.packages("KineticEval")
remove.packages("kinGUI2")
IRLSkinfit.full
(.packages())
detach("KineticEval")
detach("package:KineticEval")
(.packages())
install_github("KineticEval","zhenglei-gao")
(.packages())
detach("package:KineticEval")
IRLSkinfit.full
search()
document('KineticEval')
roxygenize('KineticEval')
check('KineticEval')
setwd("E:/KinEvalGit/")
check('KineticEval')
check('KineticEval')
setwd('C:/Users/z.gao/Documents/GitHub/')
check('KineticEval')
setwd('C:/Users/z.gao/Documents/GitHub/')
check('KineticEval')
setwd('C:/Users/z.gao/Documents/GitHub/')
install_github("KineticEval","zhenglei-gao")
install_github("KineticEval","zhenglei-gao")
q()
getwd()
search()
install_github("KineticEval","zhenglei-gao")
library(devtools)
library(roxygen2)
install_github("KineticEval","zhenglei-gao")
library(KineticEval)
search()
ex1 <- mkinmod.full(
Parent = list(type = "SFO", to = "Metab", sink = TRUE,
k = list(ini = 0.1,fixed = 0,lower = 0,upper = Inf),
M0 = list(ini = 195, fixed = 0,lower = 0,upper = Inf),
FF = list(ini = c(.1),fixed = c(0),lower = c(0),upper = c(1)),
time=c(0.0,2.8,   6.2,  12.0,  29.2,  66.8,  99.8, 127.5, 154.4, 229.9, 272.3, 288.1, 322.9),
residue = c( 157.3, 206.3, 181.4, 223.0, 163.2, 144.7,85.0, 76.5, 76.4, 51.5, 45.5, 47.3, 42.7),
weight = c( 1,  1,   1, 1, 1,   1,  1,     1,     1,     1,     1,     1,     1)),
Metab = list(type = "SFO",
k = list(ini = 0.1,fixed = 0,lower = 0,upper = Inf),
M0 = list(ini = 0, fixed = 1,lower = 0,upper = Inf),
residue =c( 0.0,  0.0,  0.0,  1.6,  4.0, 12.3, 13.5, 12.7, 11.4, 11.6, 10.9,  9.5,  7.6),
weight = c( 1,  1,   1, 1, 1,   1,  1,     1,     1,     1,     1,     1,     1))
)
Fit <- NULL
alglist <- c("L-BFGS-B","Marq", "Port","spg","solnp")
for(i in 1:5) {
Fit[[i]] <- mkinfit.full(ex1,plot = TRUE, quiet= TRUE,ctr = kingui.control(method = alglist[i],submethod = 'Port',maxIter = 100,tolerance = 1E-06, odesolver = 'lsoda'))
}
Fit
i <- 2
Fit[[i]] <- mkinfit.full(ex1,plot = TRUE, quiet= TRUE,ctr = kingui.control(method = alglist[i],submethod = 'Port',maxIter = 100,tolerance = 1E-06, odesolver = 'lsoda')
)
mkin_wide_to_long
mkin_long_to_wide
mkinmod
library(FME)
library(mkin)
mkin_long_to_wide
gradient
ex1 <- mkinmod.full(
Parent = list(type = "SFO", to = "Metab", sink = TRUE,
k = list(ini = 0.1,fixed = 0,lower = 0,upper = Inf),
M0 = list(ini = 195, fixed = 0,lower = 0,upper = Inf),
FF = list(ini = c(.1),fixed = c(0),lower = c(0),upper = c(1)),
time=c(0.0,2.8,   6.2,  12.0,  29.2,  66.8,  99.8, 127.5, 154.4, 229.9, 272.3, 288.1, 322.9),
residue = c( 157.3, 206.3, 181.4, 223.0, 163.2, 144.7,85.0, 76.5, 76.4, 51.5, 45.5, 47.3, 42.7),
weight = c( 1,  1,   1, 1, 1,   1,  1,     1,     1,     1,     1,     1,     1)),
Metab = list(type = "SFO",
k = list(ini = 0.1,fixed = 0,lower = 0,upper = Inf),
M0 = list(ini = 0, fixed = 1,lower = 0,upper = Inf),
residue =c( 0.0,  0.0,  0.0,  1.6,  4.0, 12.3, 13.5, 12.7, 11.4, 11.6, 10.9,  9.5,  7.6),
weight = c( 1,  1,   1, 1, 1,   1,  1,     1,     1,     1,     1,     1,     1))
)
Fit <- NULL
alglist <- c("L-BFGS-B","Marq", "Port","spg","solnp")
for(i in 1:5) {
Fit[[i]] <- mkinfit.full(ex1,plot = TRUE, quiet= TRUE,ctr = kingui.control(method = alglist[i],submethod = 'Port',maxIter = 100,tolerance = 1E-06, odesolver = 'lsoda'))
}
names(Fit) <- alglist
unlist(lapply(Fit, function(x) x$ssr))
Fit[[5]]
unlist(lapply(Fit, function(x) x$par))
(lapply(Fit, function(x) x$par))
ex1_a <- mkinmod.full(
Parent = list(type = "SFO", to = "Metab", sink = TRUE,
k = list(ini = 0.0058,fixed = 0,lower = 0,upper = Inf),
M0 = list(ini = 195, fixed = 0,lower = 0,upper = Inf),
FF = list(ini = c(.1),fixed = c(0),lower = c(0),upper = c(1)),
time=c(0.0,2.8,   6.2,  12.0,  29.2,  66.8,  99.8, 127.5, 154.4, 229.9, 272.3, 288.1, 322.9),
residue = c( 157.3, 206.3, 181.4, 223.0, 163.2, 144.7,85.0, 76.5, 76.4, 51.5, 45.5, 47.3, 42.7),
weight = c( 1,  1,   1, 1, 1,   1,  1,     1,     1,     1,     1,     1,     1)),
Metab = list(type = "SFO",
k = list(ini = 0.1,fixed = 0,lower = 0,upper = Inf),
M0 = list(ini = 0, fixed = 1,lower = 0,upper = Inf),
residue =c( 0.0,  0.0,  0.0,  1.6,  4.0, 12.3, 13.5, 12.7, 11.4, 11.6, 10.9,  9.5,  7.6),
weight = c( 1,  1,   1, 1, 1,   1,  1,     1,     1,     1,     1,     1,     1))
)
Fit_a <- NULL
alglist <- c("L-BFGS-B","Marq", "Port","spg","solnp")
for(i in 1:5) {
Fit_a[[i]] <- mkinfit.full(ex1_a,plot = TRUE, quiet= TRUE,ctr = kingui.control(method = alglist[i],submethod = 'Port',maxIter = 100,tolerance = 1E-06, odesolver = 'lsoda'))
}
names(Fit_a) <- alglist
lapply(Fit_a, function(x) x$par)
unlist(lapply(Fit_a, function(x) x$ssr))
BCS1 <-  read.table('../../TestCases/TestCases/BCS1/BCS_1.txt',header=T)
BCS1
save(BCS1,'BCS1.rda')
save(BCS1,file='BCS1.rda')
BCS1.l <- mkin_wide_to_long(BCS1)
indi <- c(rep(1,sum(BCS1.l$name=='Parent')),rep(0,sum(BCS1.l$name=='Metab')))
sysequ.indi <- function(t,indi,M0,kp,km,C)
{
y <- indi*M0*exp(-kp*t)+(1-indi)*C*M0*kp/(kp-km)*(exp(-km*t)-exp(-kp*t));
y
}
M00 <- 100
kp0 <- 0.1
km0 <- 0.01
C0 <- 0.1
result1 <- gnls(value ~ sysequ.indi(time,indi,M0,kp,km,C),data=BCS1.l,start=list(M0=M00,kp=kp0,km=km0,C=C0),control=gnlsControl())
library(lme)
library(nlme)
result1 <- gnls(value ~ sysequ.indi(time,indi,M0,kp,km,C),data=BCS1.l,start=list(M0=M00,kp=kp0,km=km0,C=C0),control=gnlsControl())
result1
Fit[[1]]$par
Fit[[2]]$par
ex1$diffs
library(devtools)
setwd('C:/Users/z.gao/Documents/GitHub/')
roxygenize('KineticEval')
check('KineticEval',cleanup=TRUE)
BCS2 <-  read.table('../../TestCases/TestCases/BCS1/Data_BCS2.txt',header=T)
BCS2 <-  read.table('../../TestCases/TestCases/BCS2/Data_BCS2.txt',header=T)
BCS2 <-  read.table('TestCases/TestCases/BCS2/Data_BCS2.txt',header=T)
rstudio::viewData(BCS2)
rstudio::viewData(BCS2)
names(BCS2)
names(BCS2) <- c("time","Parent","Met1","Met2","Met3","Met4","Met5")
rstudio::viewData(BCS2)
save(BCS2,file="BCS2.rda")
ex2 <- mkinmod.full(Parent= list(type = "SFO",to = c( "Met1", "Met2","Met4", "Met5"),
k = list(ini = 0.1,fixed = 0,lower = 0,upper = Inf),
M0 = list(ini = 100,fixed = 0,lower = 0,upper = Inf),
FF = list(ini = c(.1,.1,.1,.1),fixed = c(0,0,0,0),lower = c(0,0,0,0),upper = c(1,1,1,1))),
Met1 = list(type = "SFO",to = c("Met3", "Met4")),
Met2 = list(type = "SFO",to = c("Met3")),
Met3 = list(type = "SFO" ),
Met4 = list(type = "SFO", to = c("Met5")),
Met5 = list(type = "SFO"),
data=BCS2)
ex2
ex2$diffs
i <-2
Fit2 <- NULL
Fit2[[i]] <- mkinfit.full(ex2,plot = TRUE, quiet= TRUE,ctr = kingui.control(method = alglist[i],submethod = 'Port',maxIter = 100,tolerance = 1E-06, odesolver = 'lsoda'))
remove.packages(KineticEval)
remove.packages("KineticEval")
roxygenize('KineticEval')
install_github("KineticEval","zhenglei-gao")
q()
searc()
search()
library(KineticEval)
search()
kinplot(Fit[[2]])
ex1 <- mkinmod.full(
Parent = list(type = "SFO", to = "Metab", sink = TRUE,
k = list(ini = 0.1,fixed = 0,lower = 0,upper = Inf),
M0 = list(ini = 195, fixed = 0,lower = 0,upper = Inf),
FF = list(ini = c(.1),fixed = c(0),lower = c(0),upper = c(1)),
time=c(0.0,2.8,   6.2,  12.0,  29.2,  66.8,  99.8, 127.5, 154.4, 229.9, 272.3, 288.1, 322.9),
residue = c( 157.3, 206.3, 181.4, 223.0, 163.2, 144.7,85.0, 76.5, 76.4, 51.5, 45.5, 47.3, 42.7),
weight = c( 1,  1,   1, 1, 1,   1,  1,     1,     1,     1,     1,     1,     1)),
Metab = list(type = "SFO",
k = list(ini = 0.1,fixed = 0,lower = 0,upper = Inf),
M0 = list(ini = 0, fixed = 1,lower = 0,upper = Inf),
residue =c( 0.0,  0.0,  0.0,  1.6,  4.0, 12.3, 13.5, 12.7, 11.4, 11.6, 10.9,  9.5,  7.6),
weight = c( 1,  1,   1, 1, 1,   1,  1,     1,     1,     1,     1,     1,     1))
)
ex1$diffs
Fit <- NULL
alglist <- c("L-BFGS-B","Marq", "Port","spg","solnp")
for(i in 1:5) {
Fit[[i]] <- mkinfit.full(ex1,plot = TRUE, quiet= TRUE,ctr = kingui.control(method = alglist[i],submethod = 'Port',maxIter = 100,tolerance = 1E-06, odesolver = 'lsoda'))
}
names(Fit) <- alglist
(lapply(Fit, function(x) x$par))
kinplot(Fit[[2]])
library(optimx)
i
i <-2
Fit[[i]] <- mkinfit.full(ex1,plot = TRUE, quiet= TRUE,ctr = kingui.control(method = alglist[i],submethod = 'Port',maxIter = 100,tolerance = 1E-06, odesolver = 'lsoda'))
kinplot(Fit[[2]])
dev.print(png,'ex1.png')
dev.print(png,'ex1.png',width = 480)
dev.print(png,'ex1.png',width = 480)
dev.off()
kinplot(Fit[[2]])
dev.print(png,'ex1.png',width = 480)
data(BCS2)
BCS2
rstudio::viewData(BCS2)
rm(BCS2)
data(BCS2)
ex2 <- mkinmod.full(Parent= list(type = "SFO",to = c( "Met1", "Met2","Met4", "Met5"),
k = list(ini = 0.1,fixed = 0,lower = 0,upper = Inf),
M0 = list(ini = 100,fixed = 0,lower = 0,upper = Inf),
FF = list(ini = c(.1,.1,.1,.1),fixed = c(0,0,0,0),lower = c(0,0,0,0),upper = c(1,1,1,1))),
Met1 = list(type = "SFO",to = c("Met3", "Met4")),
Met2 = list(type = "SFO",to = c("Met3")),
Met3 = list(type = "SFO" ),
Met4 = list(type = "SFO", to = c("Met5")),
Met5 = list(type = "SFO"),
data=BCS2)
ex2$diffs
Fit2 <- NULL
alglist <- c("L-BFGS-B","Marq", "Port","spg","solnp")
i <- 5
Fit2[[i]] <- mkinfit.full(ex2,plot = TRUE, quiet= TRUE,ctr = kingui.control(method = alglist[i],submethod = 'Port',maxIter = 100,tolerance = 1E-06, odesolver = 'lsoda'))
kinfit(Fit[[5]])
kinplot(Fit[[5]])
kinplot(Fit2[[5]])
dev.print(png,'ex2.png',width = 480)
dev.print(png,'ex1.png',width = 480)
search()
help(install.packages)
help(install)
library(KineticEval)
mkinmodini <- mkinmod.full(Parent=list(type="SFO",to="Metab"),
Metab=list(type="SFO"),data=andrew)
Fit <- mkinfit.full(mkinmodini,ctr= kingui.control(method = 'L-BFGS-B',submethod = 'Port'))
gerwd()
setwd('C:/Users/z.gao/Documents/GitHub/')
roxygenize('KineticEval')
library(roxygen2)
roxygenize('KineticEval')
library(devtools)
has_devel()
check('KineticEval',cleanup=TRUE)
build('KineticEval')
install("KineticEval")
mkinmodini <- mkinmod.full(Parent=list(type="SFO",to="Metab"),
Metab=list(type="SFO"),data=andrew)
data(andrew)
mkinmodini <- mkinmod.full(Parent=list(type="SFO",to="Metab"),
Metab=list(type="SFO"),data=andrew)
Fit <- mkinfit.full(mkinmodini,ctr= kingui.control(method = 'L-BFGS-B',submethod = 'Port'))
source('~/Documents/GitHub/StudyKin/Improve/update_kinmod.R', echo=TRUE)
newmod1 <- update_kinmod(mkinmodini,newparms=Fit$par)$new_mkinmod
source('~/Documents/GitHub/StudyKin/Improve/kin_mod_cost.r', echo=TRUE)
newmod1 <- update_kinmod(mkinmodini,newparms=Fit$par)$new_mkinmod
Fit$par
oldparms <- c(mkinmodini$state.ini,mkinmodini$parms.ini)
oldparms
newmod1 <- update_kinmod(mkinmodini,newparms=Fit$par)$new_mkinmod
source('~/Documents/GitHub/StudyKin/Improve/update_kinmod.R', echo=TRUE)
newmod1 <- update_kinmod(mkinmodini,newparms=Fit$par)$new_mkinmod
Fit1 <- mkinfit.full(newmod1,ctr= kingui.control(method = 'L-BFGS-B',submethod = 'Port'))
newmod2 <- update_kinmod(mkinmodini,newparms=c(2.0633,0.2105,0.3033,0.8945,1))$new_mkinmod
Fit2 <- mkinfit.full(newmod2,ctr= kingui.control(method = 'L-BFGS-B',submethod = 'Port'))
Fit1 <- mkinfit.full(newmod1,ctr= kingui.control(method = 'L-BFGS-B',submethod = 'Port'))
newmod1
newmod1$lower
newmod1$upper
mkinmodini$lower
source('~/Documents/GitHub/StudyKin/Improve/update_kinmod.R', echo=TRUE)
newmod1 <- update_kinmod(mkinmodini,newparms=Fit$par)$new_mkinmod
source('~/Documents/GitHub/StudyKin/Improve/update_kinmod.R', echo=TRUE)
newmod1 <- update_kinmod(mkinmodini,newparms=Fit$par)$new_mkinmod
new_mkinmod$state.ini
state.ini.optim.boxnames
as.numeric(newparms[1:length(mkinmodini$state.ini)])
newparms
state.ini.optim
new_mkinmod$state.ini[state.ini.optim.boxnames] <- as.numeric(newparms[1:length(state.ini.optim)])
optim_parms
parms.ini[optim_parms]
newparms[(length(state.ini.optim)+1):length(newparms)]
new_mkinmod$parms.ini[optim_parms] <- newparms[(length(state.ini.optim)+1):length(newparms)]
source('~/Documents/GitHub/StudyKin/Improve/update_kinmod.R', echo=TRUE)
newmod1 <- update_kinmod(mkinmodini,newparms=Fit$par)$new_mkinmod
Fit1 <- mkinfit.full(newmod1,ctr= kingui.control(method = 'L-BFGS-B',submethod = 'Port'))
newmod2 <- update_kinmod(mkinmodini,newparms=c(2.0633,0.2105,0.3033,0.8945,1))$new_mkinmod
Fit$par
mkinmodini <- mkinmod.full(Parent=list(type="SFO",to="Metab"),
Metab=list(type="SFO",M0=list(ini=0,fixed=0,lower=0,upper=Inf)),data=andrew)
newmod2 <- update_kinmod(mkinmodini,newparms=c(2.0633,0.2105,0.3033,0.8945,1))$new_mkinmod
getwd()
roxygenize('KineticEval')
roxygenize('KineticEval')
roxygenize('KineticEval')
roxygenize('KineticEval')
check('KineticEval',cleanup=TRUE)
build('KineticEval')
install("KineticEval")
tmp  <- function(x, coef){
a <- coef[1]
b <- coef[2]
a +b*x
}
x <- 1:10
yeps <- y + rnorm(length(y), sd = 0.01)  # added noise
nls(yeps ~ a + b*x, start = list(a = 0.12345, b = 0.54321))#
nls(yeps ~ tmp(x,coef), start = list(coef = c(0.12345, 0.54321)))
y <- 2*x + 3                            # perfect fit
yeps <- y + rnorm(length(y), sd = 0.01)  # added noise
nls(yeps ~ a + b*x, start = list(a = 0.12345, b = 0.54321))#
nls(yeps ~ tmp(x,coef), start = list(coef = c(0.12345, 0.54321)))
source('~/Documents/GitHub/StudyKin/Improve/kin_mod.r', echo=TRUE)
inpartri <- mkinmodini$inpartri
outpartri <- mkinmodini$outpartri
##
## mkinmodini is an object by mkinmod.full
parms.ini <- mkinmodini$parms.ini
state.ini <- mkinmodini$state.ini
lower <- mkinmodini$lower
upper <- mkinmodini$upper
fixed_parms <- mkinmodini$fixed_parms
fixed_initials <- mkinmodini$fixed_initials
mod_vars <- names(mkinmodini$diffs)
observed <-  mkin_wide_to_long(mkinmodini$residue,time='time')
observed$err <-c(as.matrix(mkinmodini$weightmat))
## Subset dataframe with mapped (modelled) variables
observed <- subset(observed, name %in% names(mkinmodini$map))
## Get names of observed variables
## NOTE HERE: the order may not be the same as the input mkinmod.full differential equations list. ## XXXXX TODO XXXX Reorder them maybe a good idea if the data is given from a data file while the mkinmod.full is defined not following the colnames order, although it is already taken care of in the cost(P) function to reorder the odeini using mod_vars
obs_vars = unique(as.character(observed$name))
## Name the parameters if they are not named yet ## usually they are already names
if(is.null(names(parms.ini))) names(parms.ini) <- mkinmodini$parms
## Name the inital parameter values if they are not named yet
if(is.null(names(state.ini))) names(state.ini) <- mod_vars
## Parameters to be optimised
parms.fixed <- parms.ini[fixed_parms]
optim_parms <- setdiff(names(parms.ini), fixed_parms)
parms.optim <- parms.ini[optim_parms]
## # ### ### ### ### ###
state.ini.fixed <- state.ini[fixed_initials]
optim_initials <- setdiff(names(state.ini), fixed_initials)
state.ini.optim <- state.ini[optim_initials]
state.ini.optim.boxnames <- names(state.ini.optim)
state.ini.fixed.boxnames <- names(state.ini.fixed)
if(length(state.ini.optim) > 0) {
names(state.ini.optim) <- paste('M0',names(state.ini.optim),  sep="_")
}
if(length(state.ini.fixed) > 0) {
names(state.ini.fixed) <- paste('M0',names(state.ini.fixed), sep="_")
}
oldparms <- c(state.ini.optim,parms.optim)
oldparms
environment(kin_mod) <- environment()
kin_mod(P=oldparms)
if (length(mkinmodini$map) == 1) {
solution = "analytical"
} else {
if (is.matrix(mkinmodini$coefmat) & eigen) solution = "eigen"
else solution = "deSolve"
}
## always define mkindiff function since most of the time we will use it.
mkindiff <- function(t, state, parms) {
time <- t
diffs <- vector()
for (box in mod_vars)
{
diffname <- paste("d", box, sep="_")
diffs[diffname] <- with(as.list(c(time,state, parms)),
eval(parse(text=mkinmodini$diffs[[box]])))
}
return(list(c(diffs)))
}
solution
solution = "deSolve"
eigen <- FALSE
if (length(mkinmodini$map) == 1) {
solution = "analytical"
} else {
if (is.matrix(mkinmodini$coefmat) & eigen) solution = "eigen"
else solution = "deSolve"
}
solution
mkinidff
mkindiff <- function(t, state, parms) {
time <- t
diffs <- vector()
for (box in mod_vars)
{
diffname <- paste("d", box, sep="_")
diffs[diffname] <- with(as.list(c(time,state, parms)),
eval(parse(text=mkinmodini$diffs[[box]])))
}
return(list(c(diffs)))
}
mkindiff
environment(kin_mod) <- environment()
kin_mod(P=oldparms)
odesolver='lsoda'
atol=1e-9
rtol=1e-10
kin_mod(P=oldparms)
out_transformed
observed
out_predicted
reshape(out)
out
reshape(out_transformed)
reshape(out_transformed,times=observed$time)
rtol=1e-10
summary(Indometh)
head(Indometh)
wide <- reshape(Indometh, v.names = "conc", idvar = "Subject",
timevar = "time", direction = "wide")
wide
reshape(wide, direction = "long")
outtimes
source('~/Documents/GitHub/StudyKin/Improve/kin_mod.r', echo=TRUE)
kin_mod(P=oldparms)
duplicated(observed$time)
observed
names(mkinmodini)
mkinmodini$data0
v
q()
q
Q
q()
